#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
C√¥ng c·ª• x·ª≠ l√Ω batch nhi·ªÅu file PDF
Batch processing tool for multiple PDF files
"""

import os
import sys
import glob
import json
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, as_completed
import argparse
from vietnamese_pdf_processor import VietnamesePDFProcessor


class BatchPDFProcessor:
    """L·ªõp x·ª≠ l√Ω batch nhi·ªÅu PDF"""
    
    def __init__(self, max_workers=2, gpu=False, verbose=True):
        """
        Kh·ªüi t·∫°o batch processor
        Args:
            max_workers (int): S·ªë lu·ªìng x·ª≠ l√Ω song song
            gpu (bool): S·ª≠ d·ª•ng GPU
            verbose (bool): In chi ti·∫øt
        """
        self.max_workers = max_workers
        self.gpu = gpu
        self.verbose = verbose
        self.results = []
        
    def find_pdf_files(self, directory, pattern="*.pdf"):
        """
        T√¨m t·∫•t c·∫£ file PDF trong th∆∞ m·ª•c
        Args:
            directory (str): Th∆∞ m·ª•c t√¨m ki·∫øm
            pattern (str): Pattern file (m·∫∑c ƒë·ªãnh: *.pdf)
        Returns:
            list: Danh s√°ch ƒë∆∞·ªùng d·∫´n PDF
        """
        if not os.path.isdir(directory):
            raise ValueError(f"Th∆∞ m·ª•c kh√¥ng t·ªìn t·∫°i: {directory}")
        
        search_pattern = os.path.join(directory, pattern)
        pdf_files = glob.glob(search_pattern, recursive=True)
        
        # L·ªçc file c√≥ k√≠ch th∆∞·ªõc > 0
        valid_files = []
        for pdf_file in pdf_files:
            if os.path.getsize(pdf_file) > 0:
                valid_files.append(pdf_file)
            elif self.verbose:
                print(f"‚ö†Ô∏è B·ªè qua file r·ªóng: {pdf_file}")
        
        return valid_files
    
    def process_single_pdf(self, pdf_path, output_format='csv'):
        """
        X·ª≠ l√Ω m·ªôt file PDF
        Args:
            pdf_path (str): ƒê∆∞·ªùng d·∫´n PDF
            output_format (str): ƒê·ªãnh d·∫°ng xu·∫•t
        Returns:
            dict: K·∫øt qu·∫£ x·ª≠ l√Ω
        """
        start_time = datetime.now()
        
        try:
            if self.verbose:
                print(f"üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω: {os.path.basename(pdf_path)}")
            
            processor = VietnamesePDFProcessor(gpu=self.gpu, verbose=False)
            results = processor.process_pdf(pdf_path, output_format)
            
            end_time = datetime.now()
            processing_time = (end_time - start_time).total_seconds()
            
            result = {
                'file': pdf_path,
                'status': 'success',
                'start_time': start_time.isoformat(),
                'end_time': end_time.isoformat(), 
                'processing_time': processing_time,
                'total_pages': results['total_pages'],
                'processed_pages': results['processed_pages'],
                'tables_found': len(results['tables']),
                'error': None
            }
            
            if self.verbose:
                print(f"‚úÖ Ho√†n th√†nh: {os.path.basename(pdf_path)} "
                      f"({processing_time:.1f}s, {len(results['tables'])} b·∫£ng)")
            
            return result
            
        except Exception as e:
            end_time = datetime.now()
            processing_time = (end_time - start_time).total_seconds()
            
            result = {
                'file': pdf_path,
                'status': 'error',
                'start_time': start_time.isoformat(),
                'end_time': end_time.isoformat(),
                'processing_time': processing_time,
                'total_pages': 0,
                'processed_pages': 0,
                'tables_found': 0,
                'error': str(e)
            }
            
            if self.verbose:
                print(f"‚ùå L·ªói: {os.path.basename(pdf_path)} - {e}")
            
            return result
    
    def process_batch(self, pdf_files, output_format='csv'):
        """
        X·ª≠ l√Ω batch nhi·ªÅu PDF
        Args:
            pdf_files (list): Danh s√°ch ƒë∆∞·ªùng d·∫´n PDF
            output_format (str): ƒê·ªãnh d·∫°ng xu·∫•t
        Returns:
            dict: T·ªïng k·∫øt k·∫øt qu·∫£
        """
        if not pdf_files:
            raise ValueError("Kh√¥ng c√≥ file PDF n√†o ƒë·ªÉ x·ª≠ l√Ω")
        
        batch_start = datetime.now()
        
        if self.verbose:
            print(f"üöÄ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω batch {len(pdf_files)} file PDF")
            print(f"‚öôÔ∏è C·∫•u h√¨nh: {self.max_workers} workers, GPU: {self.gpu}")
        
        results = []
        
        # X·ª≠ l√Ω song song
        with ThreadPoolExecutor(max_workers=self.max_workers) as executor:
            # Submit t·∫•t c·∫£ jobs
            future_to_file = {
                executor.submit(self.process_single_pdf, pdf_file, output_format): pdf_file 
                for pdf_file in pdf_files
            }
            
            # Collect k·∫øt qu·∫£
            for future in as_completed(future_to_file):
                result = future.result()
                results.append(result)
        
        batch_end = datetime.now()
        total_time = (batch_end - batch_start).total_seconds()
        
        # T·ªïng k·∫øt
        successful = [r for r in results if r['status'] == 'success']
        failed = [r for r in results if r['status'] == 'error']
        
        total_pages = sum(r['total_pages'] for r in successful)
        total_tables = sum(r['tables_found'] for r in successful)
        
        summary = {
            'batch_start': batch_start.isoformat(),
            'batch_end': batch_end.isoformat(),
            'total_time': total_time,
            'total_files': len(pdf_files),
            'successful_files': len(successful),
            'failed_files': len(failed),
            'total_pages': total_pages,
            'total_tables': total_tables,
            'average_time_per_file': total_time / len(pdf_files) if pdf_files else 0,
            'results': results
        }
        
        if self.verbose:
            print(f"\nüìä K·∫æT QU·∫¢ BATCH:")
            print(f"   ‚úÖ Th√†nh c√¥ng: {len(successful)}/{len(pdf_files)} file")
            print(f"   ‚ùå Th·∫•t b·∫°i: {len(failed)} file")
            print(f"   üìÑ T·ªïng trang: {total_pages}")
            print(f"   üìä T·ªïng b·∫£ng: {total_tables}")
            print(f"   ‚è±Ô∏è Th·ªùi gian: {total_time:.1f}s")
            
            if failed:
                print(f"\n‚ùå File l·ªói:")
                for result in failed:
                    print(f"   - {os.path.basename(result['file'])}: {result['error']}")
        
        return summary
    
    def save_batch_report(self, summary, output_file='batch_report.json'):
        """
        L∆∞u b√°o c√°o batch
        Args:
            summary (dict): T·ªïng k·∫øt k·∫øt qu·∫£
            output_file (str): File b√°o c√°o
        """
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, ensure_ascii=False, indent=2)
        
        if self.verbose:
            print(f"üìÑ ƒê√£ l∆∞u b√°o c√°o: {output_file}")


def main():
    """H√†m main"""
    parser = argparse.ArgumentParser(description='X·ª≠ l√Ω batch nhi·ªÅu file PDF ti·∫øng Vi·ªát')
    parser.add_argument('directory', help='Th∆∞ m·ª•c ch·ª©a file PDF')
    parser.add_argument('--pattern', default='*.pdf', help='Pattern t√¨m file (m·∫∑c ƒë·ªãnh: *.pdf)')
    parser.add_argument('--format', choices=['csv', 'excel', 'json'], default='csv',
                        help='ƒê·ªãnh d·∫°ng xu·∫•t (m·∫∑c ƒë·ªãnh: csv)')
    parser.add_argument('--workers', type=int, default=2, help='S·ªë lu·ªìng x·ª≠ l√Ω (m·∫∑c ƒë·ªãnh: 2)')
    parser.add_argument('--gpu', action='store_true', help='S·ª≠ d·ª•ng GPU')
    parser.add_argument('--quiet', action='store_true', help='Kh√¥ng in chi ti·∫øt')
    parser.add_argument('--report', default='batch_report.json', help='File b√°o c√°o')
    
    args = parser.parse_args()
    
    try:
        # Kh·ªüi t·∫°o batch processor
        processor = BatchPDFProcessor(
            max_workers=args.workers,
            gpu=args.gpu,
            verbose=not args.quiet
        )
        
        # T√¨m file PDF
        pdf_files = processor.find_pdf_files(args.directory, args.pattern)
        
        if not pdf_files:
            print(f"‚ùå Kh√¥ng t√¨m th·∫•y file PDF n√†o trong: {args.directory}")
            sys.exit(1)
        
        # X·ª≠ l√Ω batch
        summary = processor.process_batch(pdf_files, args.format)
        
        # L∆∞u b√°o c√°o
        processor.save_batch_report(summary, args.report)
        
        # Exit code
        if summary['failed_files'] > 0:
            sys.exit(1)  # C√≥ l·ªói
        else:
            sys.exit(0)  # Th√†nh c√¥ng
            
    except Exception as e:
        print(f"‚ùå L·ªói batch processing: {e}")
        sys.exit(1)


if __name__ == "__main__":
    # Demo n·∫øu kh√¥ng c√≥ arguments
    if len(sys.argv) == 1:
        print("=== BATCH PDF PROCESSOR DEMO ===")
        print("S·ª≠ d·ª•ng: python batch_processor.py <th∆∞_m·ª•c> [options]")
        print("\nV√≠ d·ª•:")
        print("  python batch_processor.py ./pdfs/")
        print("  python batch_processor.py ./docs/ --format excel --workers 4")
        print("  python batch_processor.py ./files/ --pattern '**/*.pdf' --gpu")
        
        # Demo v·ªõi th∆∞ m·ª•c hi·ªán t·∫°i
        current_dir = "."
        batch_processor = BatchPDFProcessor(max_workers=1, verbose=True)
        
        try:
            pdf_files = batch_processor.find_pdf_files(current_dir)
            if pdf_files:
                print(f"\nT√¨m th·∫•y {len(pdf_files)} file PDF trong th∆∞ m·ª•c hi·ªán t·∫°i:")
                for pdf_file in pdf_files:
                    size_mb = os.path.getsize(pdf_file) / (1024*1024)
                    print(f"  - {pdf_file} ({size_mb:.1f}MB)")
                
                print(f"\nCh·∫°y demo v·ªõi file ƒë·∫ßu ti√™n...")
                demo_summary = batch_processor.process_batch([pdf_files[0]], 'csv')
                batch_processor.save_batch_report(demo_summary, 'demo_batch_report.json')
            else:
                print(f"\nKh√¥ng t√¨m th·∫•y file PDF n√†o trong th∆∞ m·ª•c hi·ªán t·∫°i")
                
        except Exception as e:
            print(f"Demo l·ªói: {e}")
    else:
        main()