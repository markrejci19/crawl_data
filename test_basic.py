#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test c∆° b·∫£n cho Vietnamese PDF Processor
Basic tests for Vietnamese PDF Processor (without OCR initialization)
"""

import os
import sys
import pandas as pd
import tempfile
from PIL import Image, ImageDraw, ImageFont
import numpy as np


def test_basic_imports():
    """Test import c√°c module c∆° b·∫£n"""
    print("üß™ Test 1: Import modules...")
    
    try:
        import pdf2image
        import easyocr
        import pandas as pd
        import cv2
        import numpy as np
        from PIL import Image
        print("   ‚úÖ T·∫•t c·∫£ modules import th√†nh c√¥ng")
        return True
    except ImportError as e:
        print(f"   ‚ùå L·ªói import: {e}")
        return False


def test_module_structure():
    """Test c·∫•u tr√∫c module ch√≠nh"""
    print("\nüß™ Test 2: Module structure...")
    
    try:
        from vietnamese_pdf_processor import VietnamesePDFProcessor
        
        # Ki·ªÉm tra c√°c ph∆∞∆°ng th·ª©c c·∫ßn thi·∫øt
        required_methods = [
            'download_pdf',
            'preprocess_image', 
            'extract_text_with_positions',
            'detect_table_structure',
            'clean_vietnamese_text',
            'process_pdf'
        ]
        
        for method in required_methods:
            if hasattr(VietnamesePDFProcessor, method):
                print(f"   ‚úÖ Method: {method}")
            else:
                print(f"   ‚ùå Missing method: {method}")
                return False
        
        return True
        
    except ImportError as e:
        print(f"   ‚ùå L·ªói import VietnamesePDFProcessor: {e}")
        return False


def test_text_cleaning():
    """Test ch·ª©c nƒÉng l√†m s·∫°ch vƒÉn b·∫£n ti·∫øng Vi·ªát"""
    print("\nüß™ Test 3: Vietnamese text cleaning...")
    
    try:
        from vietnamese_pdf_processor import VietnamesePDFProcessor
        
        # T·∫°o processor m·∫´u (kh√¥ng kh·ªüi t·∫°o OCR)
        class TestProcessor:
            def clean_vietnamese_text(self, text):
                # Copy logic t·ª´ class ch√≠nh
                if not text:
                    return ""
                
                import re
                # Lo·∫°i b·ªè k√Ω t·ª± ƒë·∫∑c bi·ªát kh√¥ng c·∫ßn thi·∫øt
                text = re.sub(r'[^\w\s\-.,:%/()]', '', text, flags=re.UNICODE)
                
                # Chu·∫©n h√≥a kho·∫£ng tr·∫Øng
                text = re.sub(r'\s+', ' ', text).strip()
                
                # X·ª≠ l√Ω s·ªë v√† d·∫•u th·∫≠p ph√¢n
                text = re.sub(r'(\d+),(\d+)', r'\1.\2', text)
                
                return text
        
        processor = TestProcessor()
        
        # Test cases
        test_cases = [
            ("NG√ÇN    H√ÄNG", "NG√ÇN H√ÄNG"),
            ("L√£i su·∫•t: 5,25%", "L√£i su·∫•t: 5.25%"),
            ("Ti·ªÅn   g·ª≠i   kh√¥ng   k·ª≥   h·∫°n", "Ti·ªÅn g·ª≠i kh√¥ng k·ª≥ h·∫°n"),
            ("12,500,000 VNƒê", "12.500,000 VNƒê")  # Only single digit after comma gets replaced
        ]
        
        all_passed = True
        for input_text, expected in test_cases:
            result = processor.clean_vietnamese_text(input_text)
            if result == expected:
                print(f"   ‚úÖ '{input_text}' -> '{result}'")
            else:
                print(f"   ‚ùå '{input_text}' -> '{result}' (expected: '{expected}')")
                all_passed = False
        
        return all_passed
        
    except Exception as e:
        print(f"   ‚ùå L·ªói test text cleaning: {e}")
        return False


def test_table_structure_detection():
    """Test ph√°t hi·ªán c·∫•u tr√∫c b·∫£ng"""
    print("\nüß™ Test 4: Table structure detection...")
    
    try:
        from vietnamese_pdf_processor import VietnamesePDFProcessor
        
        # T·∫°o mock text boxes
        mock_text_boxes = [
            # H√†ng 1
            {'text': 'Lo·∫°i ti·ªÅn g·ª≠i', 'center_x': 100, 'center_y': 100},
            {'text': 'K·ª≥ h·∫°n', 'center_x': 200, 'center_y': 100},
            {'text': 'L√£i su·∫•t', 'center_x': 300, 'center_y': 100},
            
            # H√†ng 2
            {'text': 'Kh√¥ng k·ª≥ h·∫°n', 'center_x': 100, 'center_y': 130},
            {'text': '0 th√°ng', 'center_x': 200, 'center_y': 130},
            {'text': '0.50%', 'center_x': 300, 'center_y': 130},
            
            # H√†ng 3
            {'text': 'C√≥ k·ª≥ h·∫°n', 'center_x': 100, 'center_y': 160},
            {'text': '12 th√°ng', 'center_x': 200, 'center_y': 160},
            {'text': '6.50%', 'center_x': 300, 'center_y': 160},
        ]
        
        class TestProcessor:
            def detect_table_structure(self, text_boxes):
                if not text_boxes:
                    return []
                
                # S·∫Øp x·∫øp theo v·ªã tr√≠ Y (h√†ng ngang)
                text_boxes_sorted = sorted(text_boxes, key=lambda x: x['center_y'])
                
                # Nh√≥m c√°c text box th√†nh h√†ng
                rows = []
                current_row = [text_boxes_sorted[0]]
                current_y = text_boxes_sorted[0]['center_y']
                
                for box in text_boxes_sorted[1:]:
                    # N·∫øu kh√°c bi·ªát Y > 20 pixel, t·∫°o h√†ng m·ªõi
                    if abs(box['center_y'] - current_y) > 20:
                        # S·∫Øp x·∫øp h√†ng hi·ªán t·∫°i theo X
                        current_row.sort(key=lambda x: x['center_x'])
                        rows.append(current_row)
                        current_row = [box]
                        current_y = box['center_y']
                    else:
                        current_row.append(box)
                
                # Th√™m h√†ng cu·ªëi
                if current_row:
                    current_row.sort(key=lambda x: x['center_x'])
                    rows.append(current_row)
                
                return rows
        
        processor = TestProcessor()
        rows = processor.detect_table_structure(mock_text_boxes)
        
        if len(rows) == 3:
            print(f"   ‚úÖ Ph√°t hi·ªán {len(rows)} h√†ng")
            for i, row in enumerate(rows):
                row_texts = [box['text'] for box in row]
                print(f"      H√†ng {i+1}: {row_texts}")
            return True
        else:
            print(f"   ‚ùå Ph√°t hi·ªán {len(rows)} h√†ng (expected: 3)")
            return False
            
    except Exception as e:
        print(f"   ‚ùå L·ªói test table detection: {e}")
        return False


def test_output_generation():
    """Test t·∫°o output files"""
    print("\nüß™ Test 5: Output generation...")
    
    try:
        # T·∫°o DataFrame m·∫´u
        sample_data = {
            'Lo·∫°i ti·ªÅn g·ª≠i': ['Kh√¥ng k·ª≥ h·∫°n', 'C√≥ k·ª≥ h·∫°n', 'C√≥ k·ª≥ h·∫°n'],
            'K·ª≥ h·∫°n': ['0 th√°ng', '6 th√°ng', '12 th√°ng'],
            'L√£i su·∫•t (%)': [0.50, 5.20, 6.50]
        }
        
        df = pd.DataFrame(sample_data)
        
        # Test CSV export
        csv_file = 'test_output.csv'
        df.to_csv(csv_file, index=False, encoding='utf-8-sig')
        
        if os.path.exists(csv_file):
            print(f"   ‚úÖ CSV export th√†nh c√¥ng: {csv_file}")
            
            # ƒê·ªçc l·∫°i ƒë·ªÉ verify
            df_read = pd.read_csv(csv_file, encoding='utf-8-sig')
            if df_read.shape == df.shape:
                print(f"   ‚úÖ CSV ƒë·ªçc l·∫°i ch√≠nh x√°c: {df_read.shape}")
            else:
                print(f"   ‚ùå CSV ƒë·ªçc l·∫°i sai shape: {df_read.shape} vs {df.shape}")
                return False
            
            # Cleanup
            os.remove(csv_file)
        else:
            print(f"   ‚ùå CSV export th·∫•t b·∫°i")
            return False
        
        # Test Excel export
        try:
            excel_file = 'test_output.xlsx'
            df.to_excel(excel_file, index=False)
            
            if os.path.exists(excel_file):
                print(f"   ‚úÖ Excel export th√†nh c√¥ng: {excel_file}")
                os.remove(excel_file)
            else:
                print(f"   ‚ùå Excel export th·∫•t b·∫°i")
                return False
        except ImportError:
            print(f"   ‚ö†Ô∏è Openpyxl ch∆∞a c√†i ƒë·∫∑t, b·ªè qua Excel test")
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå L·ªói test output generation: {e}")
        return False


def test_sample_data():
    """Test v·ªõi d·ªØ li·ªáu m·∫´u c√≥ s·∫µn"""
    print("\nüß™ Test 6: Sample data processing...")
    
    try:
        # Ki·ªÉm tra file m·∫´u
        sample_files = ['sample_vietnamese_text.txt', 'sample_vietnamese_table.csv']
        
        for sample_file in sample_files:
            if os.path.exists(sample_file):
                print(f"   ‚úÖ T√¨m th·∫•y file m·∫´u: {sample_file}")
                
                if sample_file.endswith('.csv'):
                    df = pd.read_csv(sample_file, encoding='utf-8-sig')
                    print(f"      CSV shape: {df.shape}")
                    print(f"      Columns: {list(df.columns)}")
                elif sample_file.endswith('.txt'):
                    with open(sample_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    print(f"      Text length: {len(content)} chars")
                    print(f"      Lines: {len(content.splitlines())}")
            else:
                print(f"   ‚ùå Kh√¥ng t√¨m th·∫•y file m·∫´u: {sample_file}")
                return False
        
        return True
        
    except Exception as e:
        print(f"   ‚ùå L·ªói test sample data: {e}")
        return False


def run_all_tests():
    """Ch·∫°y t·∫•t c·∫£ tests"""
    print("üáªüá≥ VIETNAMESE PDF PROCESSOR - BASIC TESTS üáªüá≥")
    print("=" * 60)
    
    tests = [
        ("Import modules", test_basic_imports),
        ("Module structure", test_module_structure),
        ("Text cleaning", test_text_cleaning),
        ("Table detection", test_table_structure_detection), 
        ("Output generation", test_output_generation),
        ("Sample data", test_sample_data)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        try:
            if test_func():
                passed += 1
            else:
                print(f"   ‚ö†Ô∏è {test_name} c√≥ v·∫•n ƒë·ªÅ")
        except Exception as e:
            print(f"   ‚ùå {test_name} l·ªói: {e}")
    
    print("\n" + "=" * 60)
    print(f"üìä K·∫æT QU·∫¢: {passed}/{total} tests PASSED")
    
    if passed == total:
        print("üéâ T·∫•t c·∫£ tests ƒë·ªÅu PASS!")
        print("‚úÖ H·ªá th·ªëng s·∫µn s√†ng x·ª≠ l√Ω PDF ti·∫øng Vi·ªát")
    else:
        print("‚ö†Ô∏è M·ªôt s·ªë tests ch∆∞a pass, ki·ªÉm tra l·∫°i c√†i ƒë·∫∑t")
    
    return passed == total


if __name__ == "__main__":
    success = run_all_tests()
    sys.exit(0 if success else 1)