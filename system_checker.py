#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
C√¥ng c·ª• ki·ªÉm tra v√† t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t
Performance checker and optimizer for Vietnamese PDF Processing
"""

import time
import psutil
import os
import sys
from vietnamese_pdf_processor import VietnamesePDFProcessor
import config


def check_system_requirements():
    """Ki·ªÉm tra y√™u c·∫ßu h·ªá th·ªëng"""
    print("=== KI·ªÇM TRA H·ªÜ TH·ªêNG ===")
    
    # Ki·ªÉm tra Python version
    python_version = sys.version_info
    print(f"üêç Python: {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    if python_version < (3, 7):
        print("‚ö†Ô∏è C·∫£nh b√°o: N√™n s·ª≠ d·ª•ng Python 3.7 tr·ªü l√™n")
    else:
        print("‚úÖ Phi√™n b·∫£n Python ph√π h·ª£p")
    
    # Ki·ªÉm tra RAM
    memory = psutil.virtual_memory()
    total_gb = memory.total / (1024**3)
    available_gb = memory.available / (1024**3)
    
    print(f"üíæ RAM: {total_gb:.1f}GB t·ªïng / {available_gb:.1f}GB kh·∫£ d·ª•ng")
    
    if available_gb < 2:
        print("‚ö†Ô∏è C·∫£nh b√°o: RAM th·∫•p, c√≥ th·ªÉ x·ª≠ l√Ω ch·∫≠m")
    else:
        print("‚úÖ RAM ƒë·ªß ƒë·ªÉ x·ª≠ l√Ω")
    
    # Ki·ªÉm tra CPU
    cpu_count = psutil.cpu_count()
    cpu_percent = psutil.cpu_percent(interval=1)
    
    print(f"üñ•Ô∏è CPU: {cpu_count} cores, {cpu_percent}% s·ª≠ d·ª•ng")
    
    # Ki·ªÉm tra disk space
    disk = psutil.disk_usage('.')
    free_gb = disk.free / (1024**3)
    
    print(f"üíø Disk: {free_gb:.1f}GB tr·ªëng")
    
    if free_gb < 1:
        print("‚ö†Ô∏è C·∫£nh b√°o: Dung l∆∞·ª£ng disk th·∫•p")
    else:
        print("‚úÖ Dung l∆∞·ª£ng disk ƒë·ªß")


def check_dependencies():
    """Ki·ªÉm tra c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt"""
    print("\n=== KI·ªÇM TRA TH∆Ø VI·ªÜN ===")
    
    required_packages = [
        'pdf2image',
        'easyocr', 
        'pandas',
        'opencv-python',
        'numpy',
        'pillow',
        'requests'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - Ch∆∞a c√†i ƒë·∫∑t")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n‚ö†Ô∏è C·∫ßn c√†i ƒë·∫∑t: pip install {' '.join(missing_packages)}")
        return False
    else:
        print("\n‚úÖ T·∫•t c·∫£ th∆∞ vi·ªán ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t")
        return True


def benchmark_ocr_performance():
    """ƒêo hi·ªáu su·∫•t OCR"""
    print("\n=== ƒêO HI·ªÜU SU·∫§T OCR ===")
    
    try:
        # T·∫°o processor
        start_time = time.time()
        processor = VietnamesePDFProcessor(verbose=False)
        init_time = time.time() - start_time
        
        print(f"‚è±Ô∏è Th·ªùi gian kh·ªüi t·∫°o EasyOCR: {init_time:.2f}s")
        
        if init_time > 30:
            print("‚ö†Ô∏è Kh·ªüi t·∫°o ch·∫≠m, c√≥ th·ªÉ do t·∫£i model l·∫ßn ƒë·∫ßu")
        else:
            print("‚úÖ Kh·ªüi t·∫°o nhanh")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói kh·ªüi t·∫°o OCR: {e}")
        return False


def optimize_settings():
    """G·ª£i √Ω t·ªëi ∆∞u h√≥a c√†i ƒë·∫∑t"""
    print("\n=== G·ª¢I √ù T·ªêI ∆ØU H√ìA ===")
    
    memory = psutil.virtual_memory()
    available_gb = memory.available / (1024**3)
    cpu_count = psutil.cpu_count()
    
    # G·ª£i √Ω DPI
    if available_gb < 4:
        recommended_dpi = 200
        print(f"üí° RAM th·∫•p - G·ª£i √Ω DPI: {recommended_dpi} (thay v√¨ {config.DPI})")
    else:
        recommended_dpi = 300
        print(f"‚úÖ DPI khuy·∫øn ngh·ªã: {recommended_dpi}")
    
    # G·ª£i √Ω s·ªë workers
    if cpu_count >= 4:
        recommended_workers = min(4, cpu_count // 2)
    else:
        recommended_workers = 1
    
    print(f"üí° S·ªë workers khuy·∫øn ngh·ªã: {recommended_workers}")
    
    # G·ª£i √Ω GPU
    try:
        import torch
        if torch.cuda.is_available():
            print("üöÄ CUDA kh·∫£ d·ª•ng - C√≥ th·ªÉ s·ª≠ d·ª•ng --gpu ƒë·ªÉ tƒÉng t·ªëc")
        else:
            print("üíª Ch·ªâ c√≥ CPU - S·ª≠ d·ª•ng ch·∫ø ƒë·ªô CPU")
    except ImportError:
        print("üíª PyTorch ch∆∞a c√†i ƒë·∫∑t - S·ª≠ d·ª•ng ch·∫ø ƒë·ªô CPU")
    
    return {
        'dpi': recommended_dpi,
        'workers': recommended_workers,
        'gpu': False
    }


def create_optimized_config(optimizations):
    """T·∫°o file config t·ªëi ∆∞u"""
    print("\n=== T·∫†O CONFIG T·ªêI ∆ØU ===")
    
    config_content = f"""# C·∫•u h√¨nh t·ªëi ∆∞u ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông
# Auto-generated optimized configuration

# OCR Settings
OCR_CONFIDENCE_THRESHOLD = 0.5
OCR_LANGUAGES = ['vi', 'en']
USE_GPU = {optimizations['gpu']}

# Image Processing  
DPI = {optimizations['dpi']}
IMAGE_ENHANCE_CONTRAST = 1.2
IMAGE_ENHANCE_BRIGHTNESS = 10

# Performance
MAX_WORKERS = {optimizations['workers']}
MEMORY_LIMIT_MB = 1024
TIMEOUT_SECONDS = 300

# Table Detection
TABLE_ROW_THRESHOLD = 20
TABLE_MIN_COLS = 2
TABLE_MIN_ROWS = 2

# Output Settings
DEFAULT_OUTPUT_FORMAT = 'csv'
INCLUDE_CONFIDENCE = False
SAVE_INTERMEDIATE_IMAGES = False
"""
    
    with open('config_optimized.py', 'w', encoding='utf-8') as f:
        f.write(config_content)
    
    print("‚úÖ ƒê√£ t·∫°o config_optimized.py")


def main():
    """H√†m main"""
    print("üáªüá≥ VIETNAMESE PDF PROCESSOR - SYSTEM CHECKER üáªüá≥")
    print("=" * 60)
    
    # Ki·ªÉm tra h·ªá th·ªëng
    check_system_requirements()
    
    # Ki·ªÉm tra dependencies
    if not check_dependencies():
        print("\n‚ùå Vui l√≤ng c√†i ƒë·∫∑t c√°c th∆∞ vi·ªán thi·∫øu tr∆∞·ªõc khi ti·∫øp t·ª•c")
        return
    
    # ƒêo hi·ªáu su·∫•t OCR
    if not benchmark_ocr_performance():
        print("\n‚ùå C√≥ v·∫•n ƒë·ªÅ v·ªõi OCR engine")
        return
    
    # T·ªëi ∆∞u h√≥a
    optimizations = optimize_settings()
    create_optimized_config(optimizations)
    
    print("\n" + "=" * 60)
    print("‚úÖ Ki·ªÉm tra ho√†n th√†nh!")
    print("\nüí° KHUY·∫æN NGH·ªä:")
    print("1. S·ª≠ d·ª•ng file config_optimized.py cho hi·ªáu su·∫•t t·ªët nh·∫•t")
    print("2. X·ª≠ l√Ω file PDF nh·ªè tr∆∞·ªõc ƒë·ªÉ test")
    print("3. Gi√°m s√°t vi·ªác s·ª≠ d·ª•ng RAM khi x·ª≠ l√Ω file l·ªõn")
    print("4. Ch·∫°y: python vietnamese_pdf_processor.py --help ƒë·ªÉ xem h∆∞·ªõng d·∫´n")


if __name__ == "__main__":
    main()