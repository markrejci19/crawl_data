#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
V√≠ d·ª• s·ª≠ d·ª•ng Vietnamese PDF Processor
Example usage of Vietnamese PDF Processor
"""

import os
import sys
from vietnamese_pdf_processor import VietnamesePDFProcessor


def demo_basic_usage():
    """Demo c∆° b·∫£n s·ª≠ d·ª•ng processor"""
    print("=== DEMO C∆† B·∫¢N ===")
    
    # Kh·ªüi t·∫°o processor
    processor = VietnamesePDFProcessor(gpu=False, verbose=True)
    
    # T√¨m file PDF ƒë·ªÉ demo
    sample_files = ['vpbank_interest_rates.pdf', 'a.pdf', 'sample.pdf']
    
    for pdf_file in sample_files:
        if os.path.exists(pdf_file) and os.path.getsize(pdf_file) > 0:
            print(f"\nX·ª≠ l√Ω file: {pdf_file}")
            try:
                results = processor.process_pdf(pdf_file, output_format='csv')
                
                print(f"\n‚úÖ K·∫øt qu·∫£ x·ª≠ l√Ω:")
                print(f"   üìÑ T·ªïng s·ªë trang: {results['total_pages']}")
                print(f"   ‚úÖ Trang ƒë√£ x·ª≠ l√Ω: {results['processed_pages']}")
                print(f"   üìä S·ªë b·∫£ng t√¨m th·∫•y: {len(results['tables'])}")
                
                if results['tables']:
                    print(f"\nüìã Chi ti·∫øt b·∫£ng:")
                    for table_info in results['tables']:
                        df = table_info['data']
                        print(f"   - Trang {table_info['page']}: {df.shape[0]} h√†ng √ó {df.shape[1]} c·ªôt")
                        
                        # Hi·ªÉn th·ªã preview
                        if not df.empty:
                            print(f"   Preview b·∫£ng trang {table_info['page']}:")
                            print(df.head(3).to_string(index=False))
                            print()
                
                return True
                
            except Exception as e:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω {pdf_file}: {e}")
                continue
    
    print("‚ùå Kh√¥ng t√¨m th·∫•y file PDF h·ª£p l·ªá ƒë·ªÉ demo")
    return False


def demo_download_from_url():
    """Demo t·∫£i v√† x·ª≠ l√Ω PDF t·ª´ URL"""
    print("\n=== DEMO T·∫¢I PDF T·ª™ URL ===")
    
    # URL m·∫´u (thay th·∫ø b·∫±ng URL th·ª±c t·∫ø)
    sample_urls = [
        "https://www.vpbank.com.vn/-/media/vpbank-latest/tai-lieu-bieu-mau/lai-suat-huy-dong/khcn/2025/20250708-Bieu-lai-suat-Niem-yet.pdf",
        # Th√™m URL kh√°c n·∫øu c·∫ßn
    ]
    
    processor = VietnamesePDFProcessor(verbose=True)
    
    for url in sample_urls:
        print(f"\nTh·ª≠ t·∫£i PDF t·ª´: {url}")
        
        local_file = "downloaded_sample.pdf"
        if processor.download_pdf(url, local_file):
            print(f"‚úÖ T·∫£i th√†nh c√¥ng, b·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")
            
            try:
                results = processor.process_pdf(local_file, output_format='excel')
                print(f"‚úÖ ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng!")
                
                # Cleanup
                if os.path.exists(local_file):
                    os.remove(local_file)
                    
                return True
                
            except Exception as e:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω: {e}")
        else:
            print("‚ùå Kh√¥ng th·ªÉ t·∫£i PDF t·ª´ URL (c√≥ th·ªÉ do m·∫°ng b·ªã ch·∫∑n)")
    
    return False


def demo_custom_processing():
    """Demo x·ª≠ l√Ω t√πy ch·ªânh"""
    print("\n=== DEMO X·ª¨ L√ù T√ôY CH·ªàNH ===")
    
    class CustomVietnamesePDFProcessor(VietnamesePDFProcessor):
        """Processor t√πy ch·ªânh v·ªõi c√°c c·∫£i ti·∫øn ƒë·∫∑c bi·ªát"""
        
        def clean_vietnamese_text(self, text):
            """T√πy ch·ªânh l√†m s·∫°ch vƒÉn b·∫£n"""
            # G·ªçi ph∆∞∆°ng th·ª©c g·ªëc
            text = super().clean_vietnamese_text(text)
            
            # Th√™m c√°c t√πy ch·ªânh ri√™ng
            replacements = {
                'NG√ÇN HANG': 'NG√ÇN H√ÄNG',
                'LAI SUAT': 'L√ÉI SU·∫§T',
                'Tien gui': 'Ti·ªÅn g·ª≠i',
                'KH CN': 'KHCN',
                'VPBank': 'VP Bank'
            }
            
            for old, new in replacements.items():
                text = text.replace(old, new)
            
            return text
    
    # S·ª≠ d·ª•ng processor t√πy ch·ªânh
    processor = CustomVietnamesePDFProcessor(verbose=True)
    
    # Demo v·ªõi file m·∫´u
    sample_files = ['vpbank_interest_rates.pdf', 'a.pdf']
    
    for pdf_file in sample_files:
        if os.path.exists(pdf_file) and os.path.getsize(pdf_file) > 0:
            print(f"\nX·ª≠ l√Ω t√πy ch·ªânh file: {pdf_file}")
            try:
                results = processor.process_pdf(pdf_file, output_format='json')
                print(f"‚úÖ X·ª≠ l√Ω t√πy ch·ªânh th√†nh c√¥ng!")
                return True
            except Exception as e:
                print(f"‚ùå L·ªói: {e}")
    
    print("‚ùå Kh√¥ng c√≥ file m·∫´u ƒë·ªÉ demo x·ª≠ l√Ω t√πy ch·ªânh")
    return False


def create_sample_text_data():
    """T·∫°o d·ªØ li·ªáu vƒÉn b·∫£n m·∫´u ƒë·ªÉ demo"""
    print("\n=== T·∫†O D·ªÆ LI·ªÜU M·∫™U ===")
    
    # T·∫°o file vƒÉn b·∫£n m·∫´u m√¥ ph·ªèng k·∫øt qu·∫£ OCR
    sample_text = """
NG√ÇN H√ÄNG TH∆Ø∆†NG M·∫†I C·ªî PH·∫¶N VI·ªÜT NAM TH·ªäNH V∆Ø·ª¢NG
BI·ªÇU L√ÉI SU·∫§T NI√äM Y·∫æT

Lo·∫°i ti·ªÅn g·ª≠i                    K·ª≥ h·∫°n          L√£i su·∫•t (%/nƒÉm)
Ti·ªÅn g·ª≠i kh√¥ng k·ª≥ h·∫°n           Kh√¥ng k·ª≥ h·∫°n    0.50
Ti·ªÅn g·ª≠i c√≥ k·ª≥ h·∫°n              1 th√°ng         4.20
                                3 th√°ng         4.80
                                6 th√°ng         5.20
                                12 th√°ng        6.50
                                24 th√°ng        7.00

Ghi ch√∫:
- L√£i su·∫•t √°p d·ª•ng t·ª´ ng√†y 08/07/2025
- √Åp d·ª•ng cho kh√°ch h√†ng c√° nh√¢n
- C√≥ th·ªÉ thay ƒë·ªïi m√† kh√¥ng b√°o tr∆∞·ªõc
"""
    
    with open('sample_vietnamese_text.txt', 'w', encoding='utf-8') as f:
        f.write(sample_text)
    
    print("‚úÖ ƒê√£ t·∫°o file sample_vietnamese_text.txt")
    
    # T·∫°o CSV m·∫´u
    import pandas as pd
    
    sample_data = {
        'Lo·∫°i ti·ªÅn g·ª≠i': [
            'Ti·ªÅn g·ª≠i kh√¥ng k·ª≥ h·∫°n',
            'Ti·ªÅn g·ª≠i c√≥ k·ª≥ h·∫°n',
            'Ti·ªÅn g·ª≠i c√≥ k·ª≥ h·∫°n', 
            'Ti·ªÅn g·ª≠i c√≥ k·ª≥ h·∫°n',
            'Ti·ªÅn g·ª≠i c√≥ k·ª≥ h·∫°n',
            'Ti·ªÅn g·ª≠i c√≥ k·ª≥ h·∫°n'
        ],
        'K·ª≥ h·∫°n': [
            'Kh√¥ng k·ª≥ h·∫°n',
            '1 th√°ng',
            '3 th√°ng',
            '6 th√°ng', 
            '12 th√°ng',
            '24 th√°ng'
        ],
        'L√£i su·∫•t (%/nƒÉm)': [0.50, 4.20, 4.80, 5.20, 6.50, 7.00]
    }
    
    df = pd.DataFrame(sample_data)
    df.to_csv('sample_vietnamese_table.csv', index=False, encoding='utf-8-sig')
    
    print("‚úÖ ƒê√£ t·∫°o file sample_vietnamese_table.csv")
    print("\nPreview d·ªØ li·ªáu:")
    print(df.to_string(index=False))


def main():
    """H√†m main ch·∫°y c√°c demo"""
    print("üáªüá≥ VIETNAMESE PDF PROCESSOR - DEMO EXAMPLES üáªüá≥")
    print("=" * 60)
    
    # T·∫°o d·ªØ li·ªáu m·∫´u
    create_sample_text_data()
    
    # Ch·∫°y c√°c demo
    demos = [
        ("Demo c∆° b·∫£n", demo_basic_usage),
        ("Demo t·∫£i t·ª´ URL", demo_download_from_url), 
        ("Demo x·ª≠ l√Ω t√πy ch·ªânh", demo_custom_processing)
    ]
    
    success_count = 0
    for demo_name, demo_func in demos:
        print(f"\n{'='*20} {demo_name} {'='*20}")
        try:
            if demo_func():
                success_count += 1
                print(f"‚úÖ {demo_name} ho√†n th√†nh!")
            else:
                print(f"‚ö†Ô∏è {demo_name} kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ demo")
        except Exception as e:
            print(f"‚ùå {demo_name} g·∫∑p l·ªói: {e}")
    
    print(f"\n{'='*60}")
    print(f"üìä K·∫æT QU·∫¢: {success_count}/{len(demos)} demo ch·∫°y th√†nh c√¥ng")
    
    if success_count == 0:
        print("\nüí° G·ª¢I √ù:")
        print("- Th√™m file PDF m·∫´u v√†o th∆∞ m·ª•c ƒë·ªÉ demo")
        print("- Ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ƒë·ªÉ t·∫£i PDF t·ª´ URL")
        print("- Ch·∫°y: python vietnamese_pdf_processor.py --help ƒë·ªÉ xem h∆∞·ªõng d·∫´n")


if __name__ == "__main__":
    main()